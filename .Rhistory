y <- dnorm(x,mean=2.5,sd=0.1)
plot(x,y)
runif(10)
rnorm(10, 1)
gl(3, 10)
gl(2, 8, labels = c("Control", "Treat"))
gl(2, 1, 20)
c(rnorm(10), runif(10), rnorm(10, 1))
gl(3, 10)
gl(3, 10)
split(x, f)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
x
f
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
INSTALL.PACKAGES(“RMySQL”,type=”Sources”)
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages(“RMySQL”
install.packages(“RMySQL”)
install.packages('RMySQL')
mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ls("package:RMySQL")
ls("RMySQL")
ls('package:RMySQL')
ls('package:foreign')
ls('foreign')
lsf.str("package:ts")
lsp <- function(package, all.names = FALSE, pattern)
{
package <- deparse(substitute(package))
ls(
pos = paste("package", package, sep = ":"),
all.names = all.names,
pattern = pattern
)
}
lsp(RMySQL)
lsp(RMySQL)
lsp(Matrix)
Sys.getlocale()
library(RMySQL)
db <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query <- dbGetQuery(db, "show databases;")
query
dbDisconnect(ucscDb);
dbDisconnect(db)
query
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
affyMisSmall
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5").
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
A
B
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
df
seq(0,1,length.out=5)
seq(0,1,length.out=10)
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
readB
readdf
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
install.packages('httr')
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
´g1
pg1
pg2
myapp = oauth_app("twitter",
key="WTG2lbgUDLCmXD1TvzeitKyWp",secret="2sHAA6HzMu1Sy6rKga1jl6kknrma3Hph2jCsNuwfdKQbp3zDWa")
sig = sign_oauth1.0(myapp,
token = "4532702495-XOzXezKJPexkRuKYWr0Aq5YbkZyqg06Ikn5Uwvh",
token_secret = "331QAdams526rsPtMZYxrndiKcXQl68z16CCZOjEIiCkQ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
install.packages('base64enc')
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
install.packages("jsonlite")
myapp = oauth_app("twitter",
key="WTG2lbgUDLCmXD1TvzeitKyWp",secret="2sHAA6HzMu1Sy6rKga1jl6kknrma3Hph2jCsNuwfdKQbp3zDWa")
sig = sign_oauth1.0(myapp,
token = "4532702495-XOzXezKJPexkRuKYWr0Aq5YbkZyqg06Ikn5Uwvh",
token_secret = "331QAdams526rsPtMZYxrndiKcXQl68z16CCZOjEIiCkQ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
myapp = oauth_app("twitter",
key="WTG2lbgUDLCmXD1TvzeitKyWp",secret="2sHAA6HzMu1Sy6rKga1jl6kknrma3Hph2jCsNuwfdKQbp3zDWa")
library(httr)
myapp = oauth_app("twitter",
key="WTG2lbgUDLCmXD1TvzeitKyWp",secret="2sHAA6HzMu1Sy6rKga1jl6kknrma3Hph2jCsNuwfdKQbp3zDWa")
sig = sign_oauth1.0(myapp,
token = "4532702495-XOzXezKJPexkRuKYWr0Aq5YbkZyqg06Ikn5Uwvh",
token_secret = "331QAdams526rsPtMZYxrndiKcXQl68z16CCZOjEIiCkQ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2 = jsonlite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1
homeTL
json2
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
installed.packages()[1:5,]
installed.packages()
installed.packages()[1:5,]
installed.packages()
remove.packages('jsonlite')
install.packages('jsonlite')
install.packages("jsonlite")
install.packages('httr')
install.packages('httr')
install.packages('jsonlite')
install.packages('RJSONIO')
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages('httr')
install.packages('httr')
install.packages('jsonlite')
install.packages('RJSONIO')
install.packages('httpuv')
library(RCurl)
library(devtools)
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
install.packages("jsonlite")
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
library(rjson)
library(rjson)
library(RJSONIO)
install.packages('rjson')
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 38ebb0393fe1757ffde9c45d81adzzzzzzzzz",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
source_url(jsonRawFile$download_url)
jsonRawFile
sonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 38ebb0393fe1757ffde9c45d81adzzzzzzzzz",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 38ebb0393fe1757ffde9c45d81adzzzzzzzzz",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile
jsonRawFile <- fromJSON(getURL("https://api.github.com/repos/USERNAME/REPONAME/contents/filename.R",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile
jsonRawFile <- fromJSON(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile
head(jsonRawFile )
jsonRawFile[c(1,2,3,4,5),]
jsonRawFile[1,]
size(jsonRawFile )
size(jsonRawFile)
dim(jsonRawFile)
class(jsonRawFile)
jsonRawFile(1)
jsonRawFile[1]
jsonRawFile[[1]
]
str(jsonRawFile)
names(jsonRawFile)
fromJSON(jsonRawFile)
class('["Mario", "Peach", null, "Bowser"]')
class(jsonRawFile)
class('[
{"Name" : "Mario", "Age" : 32, "Occupation" : "Plumber"},
{"Name" : "Peach", "Age" : 21, "Occupation" : "Princess"},
{},
{"Name" : "Bowser", "Occupation" : "Koopa"}
]')
toJSON(jsonRawFile)
clear
names(jsonRawFile)
jsonRawFile[[1]]
jsonRawFile[[1]]$created_at
jsonRawFile[[w]]$created_at
jsonRawFile[[2]]$created_at
jsonRawFile <- jsonlite::fromJSON(toJSON(content(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))))
class(jsonRawFile)
jsonRawFile$name
jsonRawFile$datasharing
jsonRawFile
jsonRawFile <- jsonlite::fromJSON(toJSON(content(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))))
jsonRawFile <- jsonlite::fromJSON(toJSON(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE))))
class(jsonRawFile)
jsonRawFile$name
jsonRawFile$datasharing
jsonRawFile
size(jsonRawFile)
dim(jsonRawFile)
jsonRawFile
jsonRawFile[1]
jsonRawFile[2]
jsonRawFile[1,2]
jsonRawFile
oauth_endpoints("github")
myapp <- oauth_app("github", key = "a2f6385b0082cb1dcee4", secret = "017c5d1f58c777be6ace79ca03937ead62706df4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "a2f6385b0082cb1dcee4", secret = "017c5d1f58c777be6ace79ca03937ead62706df4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages('httpuv')
install.packages('httpuv')
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "a2f6385b0082cb1dcee4", secret = "017c5d1f58c777be6ace79ca03937ead62706df4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
sonRawFile <- fromJSON(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile <- fromJSON(getURL("https://api.github.com/users/jtleek/repos",
httpheader = c(Authorization = "token 99e9a2e0e0aede9ab0481a6532253c5648efe0e9",
"User-Agent" = "RCurl"),
.opts = list(ssl.verifypeer = FALSE)))
jsonRawFile
class(jsonRawFile)
jsonRawFile$name
subset(jsonRawFile, name=datasharing)
nameDatasharing=subset(jsonRawFile, name=datasharing)
nameDatasharing$created_at
jsonRawFile$name
jsonwa
jsonRawFile$name=datasharing
jsonRawFile$name==datasharing
nameDatasharing=subset(jsonRawFile, name==datasharing)
nameDatasharing=subset(jsonRawFile, name=='datasharing')
nameDatasharing
nameDatasharing$created_at
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[1]
nameDatasharing$created_athtmlCode[1]
htmlCode[1]
size(htmlCode[1])
length(htmlCode[1])
length(htmlCode[[1])
length(htmlCode[[1]])
class(htmlCode[1])
nchar(htmlCode[1])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
x["V4"]
sum(x["V4"])
sum(x["V4"])
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x["V4"])
library(sqldf)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
install.packages('sqldf')
library(sqldf)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(url, destfile="q2.csv")
acs <- read.csv("q2.csv")
acs
join_string<- 'select pwgtp1 from acs where AGEP < 50'
sqldf(join_string,stringsAsFactors = FALSE)
sqldf("select distinct AGEP from acs")
library(dplyr)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
df
df %>% separate(x, c("A", "B"))
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
library(dplyr)
library('dplyr')
install.packages('dplyr')
library('dplyr')
library(dplyr)
dplyr
library(dplyr)
hist(.leap.seconds, "years", freq = TRUE)
hist(.leap.seconds,
seq(ISOdate(1970, 1, 1), ISOdate(2020, 1, 1), "5 years"))
random.dates <- as.Date("2001/1/1") + 70*stats::runif(100)
hist(random.dates, "weeks", format = "%d %b")
dput(head(ts))
structure(c(1364421605.227, 1364375025.034, 1364376298.393, 1364375002.928,
1364393158.084, 1364423268.856), class = c("POSIXct", "POSIXt"))
hist(ts, breaks = 7*24, type="l")
h <- hist(ts, breaks=7*24, plot=FALSE)
dates <- read.csv("http://pastebin.com/raw.php?i=sDzXKFxJ", sep=",", header=T)
head(dates)
library(ggplot2)
library(scales)
dates$converted <- as.Date(dates$Date, format="%Y-%m-%d")
ggplot(dates, aes(x=converted)) + geom_histogram()
+      opts(axis.text.x = theme_text(angle=90))
ggplot(dates, aes(x=converted)) + geom_histogram()+opts(axis.text.x = theme_text(angle=90))
head(ts)
h <- hist(ts, breaks=7*24, plot=FALSE)
Lines <- "Date            Visits
11/1/2010   696537
11/2/2010   718748
11/3/2010   799355
11/4/2010   805800
11/5/2010   701262
11/6/2010   531579
11/7/2010   690068
11/8/2010   756947
11/9/2010   718757
11/10/2010  701768
11/11/2010  820113
11/12/2010  645259"
dm <- read.table(text = Lines, header = TRUE)
dm$Date <- as.Date(dm$Date, "%m/%d/%Y")
plot(Visits ~ Date, dm, xaxt = "n", type = "l")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
library(zoo)
z <- read.zoo(text = Lines, header = TRUE, format = "%m/%d/%Y")
plot(z, xaxt = "n")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
library(zoo)
z <- read.zoo(text = Lines, header = TRUE, format = "%m/%d/%Y")
plot(z, xaxt = "n")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
library(zoo)
z <- read.zoo(text = Lines, header = TRUE, format = "%m/%d/%Y")
plot(z, xaxt = "n")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
library(zoo)
z <- read.zoo(text = Lines, header = TRUE, format = "%m/%d/%Y")
plot(z, xaxt = "n")
axis(1, dm$Date, format(dm$Date, "%b %d"), cex.axis = .7)
str(data)
setwd("C:/Users/nelson.pedernera/Desktop/BigData/DataScience/MIV/01/CourseProject/GitHub/ExData_Plotting1/")
#----------------------------------------------------------------------------------------------------------------------------------
# Reading the data
data <- read.csv("household_power_consumption.txt", sep = ";")
# Trasforming data
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data$Global_active_power<-as.numeric(as.character(data$Global_active_power))
# Filtering data
finalData<-   subset(data, Date == "2007-02-01" | Date == "2007-02-02" )
# Printing on the R screen
#hist(as.numeric(finalData$Global_active_power), col="red", xlab="Global Active Power (kilowatts)", main="Global Active Power" )
# Printing on the file
hist(as.numeric(finalData$Global_active_power), col="red", xlab="Global Active Power (kilowatts)", main="Global Active Power" )
dev.copy(png,'Plot1.png')
dev.off()
setwd("C:/Users/nelson.pedernera/Desktop/BigData/DataScience/MIV/01/CourseProject/GitHub/ExData_Plotting1/")
#----------------------------------------------------------------------------------------------------------------------------------
# Reading the data
data <- read.csv("household_power_consumption.txt", sep = ";")
# Trasforming data
dates <- data$Date
times <- data$Time
x <- paste(dates, times)
data$dateTime<-strptime(x, "%d/%m/%Y %H:%M:%S")
data$Date<-as.Date(data$Date, "%d/%m/%Y")
data$Global_active_power<-as.numeric(as.character(data$Global_active_power))
data$Sub_metering_1<-as.numeric(as.character(data$Sub_metering_1))
data$Sub_metering_2<-as.numeric(as.character(data$Sub_metering_2))
data$Sub_metering_3<-as.numeric(as.character(data$Sub_metering_3))
# Filtering data
finalData<-   subset(data, Date == "2007-02-01" | Date == "2007-02-02" )
# Setting English locale
Sys.setlocale("LC_ALL","English")
# Printing on the R screen
# with( finalData, plot(dateTime, Sub_metering_1, type = "l", ylab="Energy sub metering", xlab=""))
# with( finalData, lines(dateTime, Sub_metering_2, col="red"))
# with( finalData, lines(dateTime, Sub_metering_3, col="blue"))
# legend("topright", pch=c(NA, NA, NA), col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1))
# Printing on the file
png('Plot3.png')
with( finalData, plot(dateTime, Sub_metering_1, type = "l", ylab="Energy sub metering", xlab=""))
with( finalData, lines(dateTime, Sub_metering_2, col="red"))
with( finalData, lines(dateTime, Sub_metering_3, col="blue"))
legend("topright", pch=c(NA, NA, NA), col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1))
dev.copy(png,'plot3.png')
dev.off()
